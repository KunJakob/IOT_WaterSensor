@page "/stats"
@using System.Net.Http.Json
@using IOT_WateringSensor.Data
@using IOT_WateringSensor.Database
@using Microsoft.EntityFrameworkCore
@using MudBlazor
@using System.Timers
@inject HttpClient httpClient
@inject WaterSensorDbContext dBContext

<div>
	<MudChart ChartType="ChartType.Line" ChartSeries="@Series" @bind-SelectedIndex="Index" XAxisLabels="@XAxisLabels" Width="100%" Height="350px"></MudChart>
	<MudText Typo="Typo.h6">Desired data points</MudText>
	<MudNumericField @bind-Value="DesiredElementsInChart" Variant="Variant.Outlined" Min="2" Max="50"/>	
</div>

<MudTable Items="@Elements" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info">
	<HeaderContent>
		<MudTh>Client</MudTh>
		<MudTh>Timestamp</MudTh>
		<MudTh>Moisture (%)</MudTh>
	</HeaderContent>
	<RowTemplate>
		<MudTd DataLabel="Client">@context.ClientId</MudTd>
		<MudTd DataLabel="Timestamp">@context.TimeStamp</MudTd>
		<MudTd DataLabel="Moisture">@context.Moisture%</MudTd>
	</RowTemplate>
</MudTable>

@code {
	private bool _loading = true;
	private IEnumerable<SensorData> Elements = new List<SensorData>();
	public List<ChartSeries> Series = new List<ChartSeries>();
	public string[] XAxisLabels = {};
	
	private System.Timers.Timer timer = new System.Timers.Timer(1000);
	
	private int Index = -1; //default value cannot be 0 -> first selectedindex is 0.
	
	private int _desired = 10;
	public int DesiredElementsInChart
	{
		get { return _desired; }
		set { _desired = value;
			getData();
		}
	}

	protected override async Task OnInitializedAsync()
	{
		await getData();
		timer.Elapsed += OnTimedEvent;
		timer.AutoReset = true;
		timer.Enabled = true;
	}



	
	/* {
	new ChartSeries() { Name = "Series 1", Data = new double[] { 90, 79, 72, 69, 62, 62, 55, 65, 70 } },
	new ChartSeries() { Name = "Series 2", Data = new double[] { 10, 41, 35, 51, 49, 62, 69, 91, 148 } },
		};*/

	

	private void OnTimedEvent(Object source, ElapsedEventArgs e)
	{
		getData();
	}

	protected async Task getData()
	{

		//update table

		Elements = await dBContext.SensorData.Where(x => true).OrderByDescending(x => x.TimeStamp).Take(DesiredElementsInChart).ToListAsync();

		//update chart

		var ChartData = await dBContext.SensorData.GroupBy(x => x.ClientId).Select(group =>

			new
			{
				Name = group.Key,
				SensorData = group.OrderByDescending(x => x.TimeStamp).Take(DesiredElementsInChart).OrderBy(x => x.TimeStamp).ToList()
			}
		).ToListAsync();

		List<ChartSeries> newSeries = new List<ChartSeries>();

		ChartData.ForEach(group => newSeries.Add(new ChartSeries() { Name = group.Name.ToString().Split('-')[0], Data = group.SensorData.Select(data => (double)data.Moisture).ToArray() }));
		var longestDataset = ChartData.Select(g => g.SensorData.Count()).Max();

		// Make sure plot doesn't break if there is less data than the desired amount
		var ElementsInChart = Math.Min(DesiredElementsInChart, longestDataset);


		var flat = ChartData.SelectMany(g => g.SensorData.Select(o => o.TimeStamp).ToArray());
		var max = flat.Max();
		var min = flat.Min();

		var interpolationSpan = max.Subtract(min).Divide(ElementsInChart);

		List<string> axis = new List<string>();

		//Interpolate between highest and lowest time reading in dataset and add x axis labels for it
		for (var i = 0; i <= ElementsInChart; i++)
		{
			axis.Add(min.Add(interpolationSpan.Multiply(i)).ToLongTimeString());
		}
		
		XAxisLabels = axis.ToArray();
		Series = newSeries;

		await InvokeAsync(() => StateHasChanged());
	}


}